using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;

namespace LinqExample
{
    internal static class Program
    {
        /*
         * Вариант 6.
         * 
         * 1. Написать метод, который по заданному массиву целых чисел получает новый массив сумм цифр
         * различных положительных чётных чисел исходного массива. Элементы нового массива должны идти в порядке
         * убывания и тоже быть попарно различными. Метод должен быть написан с использованием только одного оператора.
         * 
         * 2. Написать метод, который для каждой пары «год–месяц», присутствующей в записях базыданных определяет
         * количество клиентов, которые посещали центр в указанное время, а затем выводит эту информацию на консоль
         * (вначале выводится год, затем месяц, затем количество клиентов). Сведения о каждой паре «год–месяц» выводить
         * на новой строке и упорядочивать по убыванию номера года, а для одинакового номера года — по возрастанию
         * номера месяца.
         */
        private static void Main()
        {
            var numbers = new[] {-1, 0, 1, 2, 3, 4, 5, 100, 101, 102, 103, 105};
            Console.WriteLine(string.Join(", ", GetOrderedNumbers(numbers, 2)));

            var lines = File.ReadAllLines("db.txt");
            var dataBase = lines.Select(s => s.Split())
                .Select(data => new Record
                {
                    ClientID = int.Parse(data[0]),
                    Year = int.Parse(data[1]),
                    Month = int.Parse(data[2]),
                    Duration = int.Parse(data[3])
                })
                .ToList();

            PrintClientsYearWithMaxDuration(dataBase);
            /*Console.ReadKey();*/
        }

        /*
         * 1. Написать метод, который по заданному массиву целых чисел получает новый массив сумм цифр
         * различных положительных чётных чисел исходного массива. Элементы нового массива должны идти в порядке
         * убывания и тоже быть попарно различными. Метод должен быть написан с использованием только одного оператора.
         */
        static int[] GetOrderedNumbers(int[] array, int number)
        {
            return array
                // Выбираем положительные и чётные числа
                .Where(n => n > 0 && n % 2 == 0)
                // Убираем повторения ("РАЗЛИЧНЫХ положительных чётных чисел")
                .Distinct()
                // Суммируем цифры выбранных чисел
                .Select(n => n.ToString().Select(c => (int) char.GetNumericValue(c)).Sum())
                // Ещё раз убираем повторения ("Элементы нового массива должны <...> и ТОЖЕ быть попарно РАЗЛИЧНЫМИ")
                .Distinct()
                // Сортируем по убыванию
                .OrderByDescending(n => n)
                // Превращаем в массив
                .ToArray();
        }

        /*
         * 2. Написать метод, который для каждой пары «год–месяц», присутствующей в записях базы данных определяет
         * количество клиентов, которые посещали центр в указанное время, а затем выводит эту информацию на консоль
         * (вначале выводится год, затем месяц, затем количество клиентов). Сведения о каждой паре «год–месяц» выводить
         * на новой строке и упорядочивать по убыванию номера года, а для одинакового номера года — по возрастанию
         * номера месяца.
        */
        static void PrintClientsYearWithMaxDuration(List<Record> db)
        {
            var durations = db
                // Группируем записи по году и месяцу
                .GroupBy(record => (record.Year, record.Month))
                // Для каждого года-месяца вычисляем кол-во посещений
                // и формируем кортеж (запись/структуру/группу полей/объект) содержащий:
                // * Кол-во посещений (ClientsCount)
                // * Год (Year)
                // * Месяц (Month)
                .Select(records => (Year: records.Key.Year, Month: records.Key.Month,
                    // Тут считается кол-во посещений в этот год-месяц
                    ClientsCount: records.Count()))
                // Сортируем по убыванию номера года
                .OrderByDescending(tuple => tuple.Year)
                // Сортируем записи с совпавшим годом по возрастанию номера месяца
                .ThenBy(tuple => tuple.Month);
            foreach (var (year, month, clientsCount) in durations)
                Console.WriteLine($"Год: {year}  Месяц {month}  Кол-во посещений: {clientsCount}");
        }
    }
}